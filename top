library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity top is
  Port ( 
    ten_cent: in std_logic;
    twenty_cent: in std_logic;
    fifty_cent: in std_logic;
    one_euro: in std_logic;
    resetear: in std_logic;
    clk: in std_logic;
    LED: out std_logic;
    seg: OUT std_logic_vector(7 DOWNTO 0);
    digsel_variable: OUT std_logic_vector(7 DOWNTO 0);
    product: in  std_logic_vector(1 downto 0);
    conf: in std_logic;
    volver: in std_logic
  );
end top;

architecture Behavioral of top is
    component SYNCHRNZR
        PORT(
            clk: in std_logic;
            async_in: in std_logic;
            sync_out: out std_logic;
            reset: in std_logic
        );
    end component;
    component EDGEDTCTR
        PORT(
            clk: in std_logic;
            sync_in: in std_logic;
            edge: out std_logic;
            reset: in std_logic
            );
   end component;
    component debouncer
        PORT(
            btn_in	: in std_logic;
	        btn_out	: out std_logic;
	        reset: in std_logic;
	        clk: in std_logic
            );
   end component;
     component contador
        PORT(
           CLK : in STD_LOGIC;          
           diez : in STD_LOGIC;    
           veinte : in STD_LOGIC;  
           cincuenta : in STD_LOGIC;   
           euro : in STD_LOGIC;     
           RESET : in STD_LOGIC;             
           CUENTA : out STD_LOGIC_VECTOR (3 downto 0);
           vending: in std_logic;
           error: in std_logic;
           reinicio: in std_logic
            );
   end component;
   component fsm
   port (
    RESET     : in  std_logic;
    CLK       : in  std_logic;
    producto: in  std_logic_vector(1 downto 0);
    confirmar : in  std_logic; -- switch aceptar
    LIGHT     : out std_logic;
    igual     : in  std_logic;
    menor     : in  std_logic;
    fijo     : out std_logic_vector(3 downto 0);
    vending     : out std_logic;
    reinicio    : in std_logic
  );
  end component;
   
   component comparador
            Port (
    precio: in std_logic_vector(3 downto 0);
    introducido: in std_logic_vector(3 downto 0);
    mayor: out std_logic;
    menor: out std_logic;
    igual: out std_logic 
  );
   end component;
   
   
   
   component display_variable
   PORT(cuenta : IN std_logic_vector(3 DOWNTO 0);
    clk: IN std_logic;
    error: IN std_logic;
    vending: IN std_logic;
    digsel : OUT std_logic_vector(7 DOWNTO 0);
    segmentos : OUT std_logic_vector(7 DOWNTO 0) 
    );
   end component;
   
   signal a: std_logic_vector(3 downto 0);
   signal b: std_logic_vector(3 downto 0);
   signal c: std_logic_vector(3 downto 0);
   signal d:std_logic_vector(3 downto 0);
   signal err: std_logic;
   signal i: std_logic;
   signal m: std_logic;
   signal v: std_logic;
   signal prec: std_logic_vector(3 downto 0);
   
begin   
    inst_sincro10: synchrnzr port map(
     async_in=> ten_cent,
     sync_out=>a(0),
     clk=>clk,
     reset=>resetear
     );
     inst_deboun10: debouncer port map(
     btn_in=> a(0),
     btn_out=>b(0),
     clk=>clk,
     reset=>resetear
     );
     inst_edge10: EDGEDTCTR port map(
     sync_in=> b(0),
     clk=>clk,
     edge=>c(0),
     reset=>resetear
     );
     inst_sincro20: synchrnzr port map(
     async_in=> twenty_cent,
     sync_out=>a(1),
     clk=>clk,
     reset=>resetear
     );
     inst_deboun20: debouncer port map(
     btn_in=> a(1),
     btn_out=>b(1),
     clk=>clk,
     reset=>resetear
     );
     inst_edge20: EDGEDTCTR port map(
     sync_in=> b(1),
     clk=>clk,
     edge=>c(1),
     reset=>resetear
     );
         inst_sincro50: synchrnzr port map(
     async_in=> fifty_cent,
     sync_out=>a(2),
     clk=>clk,
     reset=>resetear
     );
     inst_deboun50: debouncer port map(
     btn_in=> a(2),
     btn_out=>b(2),
     clk=>clk,
     reset=>resetear
     );
     inst_edge50: EDGEDTCTR port map(
     sync_in=> b(2),
     clk=>clk,
     edge=>c(2),
     reset=>resetear
     );
         inst_sincroeuro: synchrnzr port map(
     async_in=> one_euro,
     sync_out=>a(3),
     clk=>clk,
     reset=>resetear
     );
     inst_debouneuro: debouncer port map(
     btn_in=> a(3),
     btn_out=>b(3),
     clk=>clk,
     reset=>resetear
     );
     inst_edgeeuro: EDGEDTCTR port map(
     sync_in=> b(3),
     clk=>clk,
     edge=>c(3),
     reset=>resetear
     );
     inst_contador: contador port map(
     diez=> c(0),
     veinte=> c(1),
     cincuenta=> c(2),
     euro=> c(3),
     clk=>clk,
     reset=>resetear,
     cuenta=>d,
     vending=>v,
     error=>err,
     reinicio=> volver
     );
     inst_comparador: comparador port map(
        precio=>prec,
        introducido=> d,
        mayor=>err,
        menor=>m,
        igual=>i
     );
     inst_fsm: fsm port map(
        menor =>m,
        igual =>i,
        confirmar =>conf,
        producto =>product,
        reset => resetear,
        clk=> clk,
        LIGHT=> LED,
        fijo=> prec,
        vending=> v,
        reinicio=> volver
     );
     inst_display_variable: display_variable port map(
        cuenta=>d,
        clk=>clk,
        digsel=>digsel_variable,
        segmentos=>seg,
        error=>resetear,
        vending=> v
     );
end Behavioral;
