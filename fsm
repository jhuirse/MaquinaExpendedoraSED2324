library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.NUMERIC_STD.ALL;

entity fsm is
  port (
    RESET       : in  std_logic;
    CLK         : in  std_logic;
    producto    : in  std_logic_vector(1 downto 0);
    confirmar   : in  std_logic; -- switch aceptar
    LIGHT       : out std_logic;
    igual       : in  std_logic;
    menor       : in  std_logic;
    fijo        : out std_logic_vector(3 downto 0);
    vending     : out std_logic
  );
end fsm;

architecture behavioral of fsm is 
  type STATES is (S0, S1, S2);
  signal current_state: STATES;
  signal next_state: STATES;
  begin
  state_register: process (RESET, CLK)
  begin
    if RESET = '0' then
      current_state <= S0;
    elsif CLK'event and CLK = '1' then
      current_state <= next_state;
    end if;
  end process;

nextstate: process (confirmar,igual,current_state)
  begin
    next_state <= current_state;
    case current_state is
     when S0 =>
     case producto is     -- Selección de producto con switches en el primer estado
       when "00" =>
         fijo <= "0110";  
       when "01" =>
         fijo <= "1100"; 
       when "10" =>
         fijo <= "1001";  
       when others =>
         fijo <= "1110";
       end case;

        if confirmar = '1' then  -- Switch de confirmación
           next_state <= S1;
         end if;
     when S1 =>
        if igual='1' then        -- Comparador indica que el precio fijo es igual al precio del sumador
          next_state <= S2;
        end if;
      when S2 =>
      light<='1','0' after 3000ms; --LED se enciende por 3 segundos y pasa de estado
      next_state <= S0;
    end case;
  end process;
end behavioral;
